#!/bin/bash
# VMS Configuration Selection Script
# Interactive VM and disk type selection with cost information

set -e

echo "🔧 VMS Configuration Selection"
echo "==============================="
echo ""

# VM configurations with approximate hourly costs (USD)
declare -A vm_configs=(
    ["1"]="e2-micro:0.50GB:1vCPU:\$0.006/hr:\$0.004/hr"
    ["2"]="e2-small:2GB:1vCPU:\$0.021/hr:\$0.013/hr"
    ["3"]="e2-standard-2:8GB:2vCPUs:\$0.067/hr:\$0.040/hr"
    ["4"]="e2-standard-4:16GB:4vCPUs:\$0.134/hr:\$0.081/hr"
    ["5"]="n2-standard-4:16GB:4vCPUs:\$0.195/hr:\$0.118/hr"
)

# Disk configurations with approximate monthly costs per GB (USD)
declare -A disk_configs=(
    ["1"]="pd-standard:Standard persistent disk:\$0.040/GB/month"
    ["2"]="pd-balanced:Balanced persistent disk:\$0.100/GB/month"
    ["3"]="pd-ssd:SSD persistent disk:\$0.170/GB/month"
)

echo "📊 Available VM Configurations:"
echo "--------------------------------"
for i in {1..5}; do
    IFS=':' read -ra parts <<< "${vm_configs[$i]}"
    machine_type="${parts[0]}"
    memory="${parts[1]}"
    cpu="${parts[2]}"
    regular_cost="${parts[3]}"
    spot_cost="${parts[4]}"
    
    printf "%d. %-15s | %8s | %6s | Regular: %11s | Spot: %11s\n" \
           "$i" "$machine_type" "$memory" "$cpu" "$regular_cost" "$spot_cost"
done

echo ""
echo "💿 Available Disk Configurations:"
echo "--------------------------------"
for i in {1..3}; do
    IFS=':' read -ra parts <<< "${disk_configs[$i]}"
    disk_type="${parts[0]}"
    description="${parts[1]}"
    cost="${parts[2]}"
    
    printf "%d. %-12s | %30s | %s\n" \
           "$i" "$disk_type" "$description" "$cost"
done

echo ""
echo "💡 Recommendations:"
echo "  • For development: e2-standard-2 or e2-standard-4 with pd-balanced"
echo "  • For production: n2-standard-4 with pd-ssd"
echo "  • For cost optimization: Use spot instances (when available)"
echo ""

# VM selection
while true; do
    read -p "Select VM configuration (1-5): " vm_choice
    if [[ "$vm_choice" =~ ^[1-5]$ ]]; then
        break
    else
        echo "❌ Invalid selection. Please choose 1-5."
    fi
done

# Disk selection
while true; do
    read -p "Select disk configuration (1-3): " disk_choice
    if [[ "$disk_choice" =~ ^[1-3]$ ]]; then
        break
    else
        echo "❌ Invalid selection. Please choose 1-3."
    fi
done

# Disk size selection
while true; do
    read -p "Enter disk size in GB (minimum 50, recommended 100): " disk_size
    if [[ "$disk_size" =~ ^[0-9]+$ ]] && [ "$disk_size" -ge 50 ]; then
        break
    else
        echo "❌ Invalid disk size. Please enter a number >= 50."
    fi
done

# Spot instance selection
echo ""
read -p "Use spot instance for cost savings? (y/N): " use_spot
use_spot=${use_spot,,}  # Convert to lowercase

# Parse selected configurations
IFS=':' read -ra vm_parts <<< "${vm_configs[$vm_choice]}"
selected_vm_type="${vm_parts[0]}"

IFS=':' read -ra disk_parts <<< "${disk_configs[$disk_choice]}"
selected_disk_type="${disk_parts[0]}"

# Calculate estimated costs
vm_cost="${vm_parts[3]}"
if [[ "$use_spot" == "y" ]]; then
    vm_cost="${vm_parts[4]}"
fi

disk_cost_per_gb=$(echo "${disk_parts[2]}" | sed 's/\$\([0-9.]*\).*$/\1/')
disk_monthly_cost=$(echo "scale=2; $disk_cost_per_gb * $disk_size" | bc 2>/dev/null || echo "N/A")

echo ""
echo "📝 Configuration Summary:"
echo "========================="
echo "VM Type: $selected_vm_type"
echo "Memory: ${vm_parts[1]}"
echo "CPUs: ${vm_parts[2]}"
echo "Spot Instance: $([ "$use_spot" == "y" ] && echo "Yes" || echo "No")"
echo "Estimated VM Cost: $vm_cost"
echo ""
echo "Disk Type: $selected_disk_type"
echo "Disk Size: ${disk_size}GB"
echo "Estimated Disk Cost: \$${disk_monthly_cost}/month"
echo ""

# Write to terraform.tfvars
cat > terraform.tfvars << EOF
# VMS Configuration - Generated by select_config.sh
# Generated on: $(date)

vm_machine_type = "$selected_vm_type"
disk_type = "$selected_disk_type"
disk_size_gb = $disk_size

# Spot instance configuration
use_spot_instance = $([ "$use_spot" == "y" ] && echo "true" || echo "false")

# Additional configurations will be added during provisioning
EOF

echo "✅ Configuration saved to terraform.tfvars"
echo ""
echo "🚀 Next steps:"
echo "   1. Run the VMS CLI: python ../vms.py"
echo "   2. Or manually run: terraform init && terraform apply"
echo ""
echo "⚠️  Note: Actual costs may vary based on usage and GCP pricing changes."